# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.airport_model_checkpoint import AirportModelCheckpoint  # noqa: F401,E501
from swagger_server import util


class AirportModel(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, airport: str=None, shortcode: str=None, city: str=None, state: str=None, latitude: int=None, longitude: int=None, utc: int=None, dst: bool=None, precheck: bool=None, checkpoint: AirportModelCheckpoint=None):  # noqa: E501
        """AirportModel - a model defined in Swagger

        :param airport: The airport of this AirportModel.  # noqa: E501
        :type airport: str
        :param shortcode: The shortcode of this AirportModel.  # noqa: E501
        :type shortcode: str
        :param city: The city of this AirportModel.  # noqa: E501
        :type city: str
        :param state: The state of this AirportModel.  # noqa: E501
        :type state: str
        :param latitude: The latitude of this AirportModel.  # noqa: E501
        :type latitude: int
        :param longitude: The longitude of this AirportModel.  # noqa: E501
        :type longitude: int
        :param utc: The utc of this AirportModel.  # noqa: E501
        :type utc: int
        :param dst: The dst of this AirportModel.  # noqa: E501
        :type dst: bool
        :param precheck: The precheck of this AirportModel.  # noqa: E501
        :type precheck: bool
        :param checkpoint: The checkpoint of this AirportModel.  # noqa: E501
        :type checkpoint: AirportModelCheckpoint
        """
        self.swagger_types = {
            'airport': str,
            'shortcode': str,
            'city': str,
            'state': str,
            'latitude': int,
            'longitude': int,
            'utc': int,
            'dst': bool,
            'precheck': bool,
            'checkpoint': AirportModelCheckpoint
        }

        self.attribute_map = {
            'airport': 'airport',
            'shortcode': 'shortcode',
            'city': 'city',
            'state': 'state',
            'latitude': 'latitude',
            'longitude': 'longitude',
            'utc': 'utc',
            'dst': 'dst',
            'precheck': 'precheck',
            'checkpoint': 'checkpoint'
        }
        self._airport = airport
        self._shortcode = shortcode
        self._city = city
        self._state = state
        self._latitude = latitude
        self._longitude = longitude
        self._utc = utc
        self._dst = dst
        self._precheck = precheck
        self._checkpoint = checkpoint

    @classmethod
    def from_dict(cls, dikt) -> 'AirportModel':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The AirportModel of this AirportModel.  # noqa: E501
        :rtype: AirportModel
        """
        return util.deserialize_model(dikt, cls)

    @property
    def airport(self) -> str:
        """Gets the airport of this AirportModel.


        :return: The airport of this AirportModel.
        :rtype: str
        """
        return self._airport

    @airport.setter
    def airport(self, airport: str):
        """Sets the airport of this AirportModel.


        :param airport: The airport of this AirportModel.
        :type airport: str
        """

        self._airport = airport

    @property
    def shortcode(self) -> str:
        """Gets the shortcode of this AirportModel.


        :return: The shortcode of this AirportModel.
        :rtype: str
        """
        return self._shortcode

    @shortcode.setter
    def shortcode(self, shortcode: str):
        """Sets the shortcode of this AirportModel.


        :param shortcode: The shortcode of this AirportModel.
        :type shortcode: str
        """

        self._shortcode = shortcode

    @property
    def city(self) -> str:
        """Gets the city of this AirportModel.


        :return: The city of this AirportModel.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city: str):
        """Sets the city of this AirportModel.


        :param city: The city of this AirportModel.
        :type city: str
        """

        self._city = city

    @property
    def state(self) -> str:
        """Gets the state of this AirportModel.


        :return: The state of this AirportModel.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state: str):
        """Sets the state of this AirportModel.


        :param state: The state of this AirportModel.
        :type state: str
        """

        self._state = state

    @property
    def latitude(self) -> int:
        """Gets the latitude of this AirportModel.


        :return: The latitude of this AirportModel.
        :rtype: int
        """
        return self._latitude

    @latitude.setter
    def latitude(self, latitude: int):
        """Sets the latitude of this AirportModel.


        :param latitude: The latitude of this AirportModel.
        :type latitude: int
        """

        self._latitude = latitude

    @property
    def longitude(self) -> int:
        """Gets the longitude of this AirportModel.


        :return: The longitude of this AirportModel.
        :rtype: int
        """
        return self._longitude

    @longitude.setter
    def longitude(self, longitude: int):
        """Sets the longitude of this AirportModel.


        :param longitude: The longitude of this AirportModel.
        :type longitude: int
        """

        self._longitude = longitude

    @property
    def utc(self) -> int:
        """Gets the utc of this AirportModel.


        :return: The utc of this AirportModel.
        :rtype: int
        """
        return self._utc

    @utc.setter
    def utc(self, utc: int):
        """Sets the utc of this AirportModel.


        :param utc: The utc of this AirportModel.
        :type utc: int
        """

        self._utc = utc

    @property
    def dst(self) -> bool:
        """Gets the dst of this AirportModel.


        :return: The dst of this AirportModel.
        :rtype: bool
        """
        return self._dst

    @dst.setter
    def dst(self, dst: bool):
        """Sets the dst of this AirportModel.


        :param dst: The dst of this AirportModel.
        :type dst: bool
        """

        self._dst = dst

    @property
    def precheck(self) -> bool:
        """Gets the precheck of this AirportModel.


        :return: The precheck of this AirportModel.
        :rtype: bool
        """
        return self._precheck

    @precheck.setter
    def precheck(self, precheck: bool):
        """Sets the precheck of this AirportModel.


        :param precheck: The precheck of this AirportModel.
        :type precheck: bool
        """

        self._precheck = precheck

    @property
    def checkpoint(self) -> AirportModelCheckpoint:
        """Gets the checkpoint of this AirportModel.


        :return: The checkpoint of this AirportModel.
        :rtype: AirportModelCheckpoint
        """
        return self._checkpoint

    @checkpoint.setter
    def checkpoint(self, checkpoint: AirportModelCheckpoint):
        """Sets the checkpoint of this AirportModel.


        :param checkpoint: The checkpoint of this AirportModel.
        :type checkpoint: AirportModelCheckpoint
        """

        self._checkpoint = checkpoint
